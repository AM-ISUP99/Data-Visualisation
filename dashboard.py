import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from streamlit_option_menu import option_menu
import io
import json 
import base64
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.feature_selection import SelectFromModel
from keplergl import KeplerGl
import geopandas as gpd

# Configuration de la page
st.set_page_config(
    page_title="Life Expectancy Dashboard",
    page_icon="üåç",
    layout="wide",

)

# Chargement des donn√©es
@st.cache_data  # Cette d√©coration permet de mettre en cache les donn√©es
def load_data():
    try:
        # Remplacez 'votre_fichier.csv' par le nom de votre fichier
        df = pd.read_csv('data/mon_fichier.csv')
        df['Status'] = df.apply(
        lambda row: 'Developed' if row['Economy_status_Developed'] == 1 else 'Developing',
        axis=1
        )
    
        # Supprimer les colonnes de statut √©conomique binaires car elles ne sont plus n√©cessaires
        df = df.drop(['Economy_status_Developed', 'Economy_status_Developing'], axis=1)
    
        return df
    except FileNotFoundError:
        st.error("Fichier de donn√©es non trouv√©!")
        # Retourner des donn√©es factices en cas d'erreur
        return pd.DataFrame()  # ou vos donn√©es exemple actuelles

# Chargement des donn√©es
df = load_data()

def create_kepler_map():
    st.markdown('<div class="gradient-text">Carte interactive</div>', unsafe_allow_html=True)
    
    @st.cache_data
    def load_geo_data():
        # Charger les donn√©es g√©ographiques des pays
        world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

        # Liste compl√®te des colonnes num√©riques
        numeric_columns = [
            'Life_expectancy', 'Adult_mortality', 'Infant_deaths', 
            'Alcohol_consumption', 'Hepatitis_B', 'Measles',
            'BMI', 'Under_five_deaths', 'Polio', 'GDP_per_capita',
            'Population_mln', 'Thinness_ten_nineteen_years',
            'Thinness_five_nine_years', 'Diphtheria',
            'Incidents_HIV', 'Schooling'
        ]
        
        # D√©finir le dictionnaire de mapping
        country_name_mapping = {
            'United States of America': 'United States',
            'Dominican Rep.': 'Dominican Republic',
            'Central African Rep.': 'Central African Republic',
            'Dem. Rep. Congo': 'Democratic Republic of the Congo',
            'Congo': 'Republic of Congo',
            'S. Sudan': 'South Sudan',
            'Solomon Is.': 'Solomon Islands',
            'Eq. Guinea': 'Equatorial Guinea',
            'Guinea-Bissau': 'Guinea Bissau',
            'Bosnia and Herz.': 'Bosnia and Herzegovina',
            'Czech Rep.': 'Czech Republic',
            'Macedonia': 'North Macedonia',
            'Slovakia': 'Slovak Republic',
            'Brunei': 'Brunei Darussalam',
            'Timor-Leste': 'East Timor',
            'Lao PDR': 'Laos',
            'Vietnam': 'Viet Nam'
        }

        # Appliquer le mapping
        world['name'] = world['name'].replace(country_name_mapping)

        # Obtenir les derni√®res donn√©es
        df_latest = df[df['Year'] == df['Year'].max()]

        # Cr√©er le GeoDataFrame
        geo_df = gpd.GeoDataFrame(
            world.merge(df_latest, how='left', left_on=['name'], right_on=['Country']),
            geometry='geometry'
        )

        # Convertir toutes les colonnes en num√©rique
        for col in numeric_columns:
            if col in geo_df.columns:
                geo_df[col] = pd.to_numeric(geo_df[col], errors='coerce')

        # Remplir les valeurs manquantes
        for col in numeric_columns:
            if col in geo_df.columns:
                geo_df[col].fillna(df_latest[col].mean(), inplace=True)
        
        return geo_df

    # Charger les donn√©es
    geo_df = load_geo_data()

    # Configuration de Kepler
    config = {'version': 'v1', 'config': {'visState': {'filters': [], 'layers': [{'id': 'gsk43pu', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'Esp√©rance de vie', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': True, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer RdYlGn-6', 'type': 'diverging', 'category': 'ColorBrewer', 'colors': ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91cf60', '#1a9850']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Life_expectancy', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': 'xvagl3n', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'Mortalit√© infantile ', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'Uber Viz Diverging 1.5', 'type': 'diverging', 'category': 'Uber', 'colors': ['#00939C', '#5DBABF', '#BAE1E2', '#F8C0AA', '#DD7755', '#C22E00']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Infant_deaths', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': 'nn7tyc', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'Mortalit√© adulte', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'Uber Viz Diverging 1.5', 'type': 'diverging', 'category': 'Uber', 'colors': ['#00939C', '#5DBABF', '#BAE1E2', '#F8C0AA', '#DD7755', '#C22E00']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Adult_mortality', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': '8kg1roa', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'BMI', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer YlGn-6', 'type': 'sequential', 'category': 'ColorBrewer', 'colors': ['#ffffcc', '#d9f0a3', '#addd8e', '#78c679', '#31a354', '#006837']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'BMI', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': 'k7upy2t', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'GDP per capita', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer RdBu-6', 'type': 'diverging', 'category': 'ColorBrewer', 'colors': ['#b2182b', '#ef8a62', '#fddbc7', '#d1e5f0', '#67a9cf', '#2166ac']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'GDP_per_capita', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': 'n1csad6', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'Population', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer RdYlGn-6', 'type': 'diverging', 'category': 'ColorBrewer', 'colors': ['#1a9850', '#91cf60', '#d9ef8b', '#fee08b', '#fc8d59', '#d73027'], 'reversed': True}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Population_mln', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': 'vzla5gt', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'VIH', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer YlOrRd-6', 'type': 'sequential', 'category': 'ColorBrewer', 'colors': ['#ffffb2', '#fed976', '#feb24c', '#fd8d3c', '#f03b20', '#bd0026'], 'reversed': False}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Incidents_HIV', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': '8e625fv', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': 'H√©patite B', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer RdYlGn-6', 'type': 'diverging', 'category': 'ColorBrewer', 'colors': ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91cf60', '#1a9850']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Hepatitis_B', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}, {'id': '3ko6icb', 'type': 'geojson', 'config': {'dataId': 'data_1', 'label': '√âducation ', 'color': [241, 92, 23], 'highlightColor': [252, 242, 26, 255], 'columns': {'geojson': 'geometry'}, 'isVisible': False, 'visConfig': {'opacity': 0.8, 'strokeOpacity': 0.8, 'thickness': 0.5, 'strokeColor': [136, 87, 44], 'colorRange': {'name': 'ColorBrewer RdYlGn-6', 'type': 'diverging', 'category': 'ColorBrewer', 'colors': ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91cf60', '#1a9850']}, 'strokeColorRange': {'name': 'Global Warming', 'type': 'sequential', 'category': 'Uber', 'colors': ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']}, 'radius': 10, 'sizeRange': [0, 10], 'radiusRange': [0, 50], 'heightRange': [0, 500], 'elevationScale': 5, 'enableElevationZoomFactor': True, 'stroked': True, 'filled': True, 'enable3d': False, 'wireframe': False}, 'hidden': False, 'textLabel': [{'field': None, 'color': [255, 255, 255], 'size': 18, 'offset': [0, 0], 'anchor': 'start', 'alignment': 'center'}]}, 'visualChannels': {'colorField': {'name': 'Schooling', 'type': 'real'}, 'colorScale': 'quantize', 'strokeColorField': None, 'strokeColorScale': 'quantile', 'sizeField': None, 'sizeScale': 'linear', 'heightField': None, 'heightScale': 'linear', 'radiusField': None, 'radiusScale': 'linear'}}], 'interactionConfig': {'tooltip': {'fieldsToShow': {'data_1': [{'name': 'name', 'format': None}, {'name': 'Population_mln', 'format': None}, {'name': 'GDP_per_capita', 'format': None}, {'name': 'Life_expectancy', 'format': None}, {'name': 'Adult_mortality', 'format': None}, {'name': 'Infant_deaths', 'format': None}, {'name': 'Hepatitis_B', 'format': None}, {'name': 'Measles', 'format': None}, {'name': 'BMI', 'format': None}, {'name': 'Incidents_HIV', 'format': None}]}, 'compareMode': False, 'compareType': 'absolute', 'enabled': True}, 'brush': {'size': 0.5, 'enabled': False}, 'geocoder': {'enabled': False}, 'coordinate': {'enabled': False}}, 'layerBlending': 'normal', 'splitMaps': [], 'animationConfig': {'currentTime': None, 'speed': 1}}, 'mapState': {'bearing': 0, 'dragRotate': False, 'latitude': 45.89210339076884, 'longitude': 15.436628808912463, 'pitch': 0, 'zoom': 1.3245626891605111, 'isSplit': False}, 'mapStyle': {'styleType': 'dark', 'topLayerGroups': {}, 'visibleLayerGroups': {'label': True, 'road': True, 'border': False, 'building': True, 'water': True, 'land': True, '3d building': False}, 'threeDBuildingColor': [9.665468314072013, 17.18305478057247, 31.1442867897876], 'mapStyles': {}}}}

    # Cr√©er la carte
    map_1 = KeplerGl(height=600, config=config)
    
    # Ajouter les donn√©es
    map_1.add_data(data=geo_df, name="data_1")
    
    # Afficher
    st.components.v1.html(map_1._repr_html_(), height=600)

    # Apr√®s l'affichage de la carte, ajouter le guide
    with st.expander("üìñ Guide d'utilisation de la carte", expanded=False):
        st.markdown("""
        ### Navigation de base
        - üñ±Ô∏è **D√©placement** : Cliquez et faites glisser la carte
        - üîç **Zoom** : Utilisez la molette de la souris ou le pav√© tactile
        - üåç **Rotation** : Maintenez SHIFT + cliquez et faites glisser
        - üîÑ **R√©initialiser la vue** : Double-cliquez sur la carte
        
        ### Interactions avanc√©es
        - üìç **Informations sur un pays** : Cliquez sur un pays
        - üìä **L√©gende** : En bas √† droite
        - ‚öôÔ∏è **Menu des param√®tres** : Ic√¥ne en haut √† droite
        
        ### Panneau de configuration
        - üé® **Layers** : Apparence de la carte
        - üéØ **Filters** : Filtrage des donn√©es
        - üìù **Interactions** : Param√®tres d'interaction
        - üíæ **Base Map** : Style de la carte
        
        ### Code couleur
        - üî¥ Rouge fonc√© : Esp√©rance de vie plus faible
        - üü° Jaune : Esp√©rance de vie moyenne
        - üü¢ Vert : Esp√©rance de vie plus √©lev√©e
        
        ### Astuces
        - üí° Ajustez l'opacit√© pour une meilleure visibilit√©
        - üìè √âchelle disponible en bas √† gauche
        - üìä Donn√©es bas√©es sur les statistiques les plus r√©centes
        - üîç Utilisez les filtres pour des analyses cibl√©es
        """)

def prepare_prediction_model(df):
    """
    Pr√©pare le mod√®le de pr√©diction en s√©lectionnant les variables les plus importantes.
    """
    # Copie du DataFrame pour √©viter les modifications sur l'original
    df_model = df.copy()
    
    # S√©lection initiale des features num√©riques (excluding target and non-predictive columns)
    feature_columns = df_model.select_dtypes(include=['float64', 'int64']).columns.tolist()
    feature_columns = [col for col in feature_columns if col not in ['Life_expectancy', 'Year']]
    
    # Pr√©paration des donn√©es
    X = df_model[feature_columns]
    y = df_model['Life_expectancy']
    
    # Division train/test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Standardisation des features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    
    # Cr√©ation et entra√Ænement du mod√®le pour la s√©lection de features
    sel_model = RandomForestRegressor(n_estimators=100, random_state=42)
    sel_model.fit(X_train_scaled, y_train)
    
    # S√©lection des features les plus importantes
    selector = SelectFromModel(sel_model, prefit=True)
    feature_mask = selector.get_support()
    selected_features = [feature for feature, selected in zip(feature_columns, feature_mask) if selected]
    
    # Cr√©ation et entra√Ænement du mod√®le final avec les features s√©lectionn√©es
    final_model = RandomForestRegressor(n_estimators=100, random_state=42)
    final_model.fit(X_train[selected_features], y_train)
    
    return final_model, selected_features, scaler

def calculate_trend(data, column):
    """
    Calcule la tendance moyenne annuelle pour une colonne donn√©e
    """
    if len(data) < 2:
        return 0
    
    yearly_changes = []
    values = data[column].values
    
    for i in range(1, len(values)):
        if values[i-1] != 0:  # √âviter la division par z√©ro
            yearly_change = (values[i] - values[i-1]) / values[i-1]
            yearly_changes.append(yearly_change)
    
    if not yearly_changes:
        return 0
    
    # Retourne la m√©diane des changements pour √™tre plus robuste aux valeurs extr√™mes
    return np.median(yearly_changes)

def prepare_prediction_model(df):
    """
    Pr√©pare le mod√®le de pr√©diction en s√©lectionnant les variables les plus importantes.
    """
    # Copie du DataFrame pour √©viter les modifications sur l'original
    df_model = df.copy()
    
    # S√©lection initiale des features num√©riques
    feature_columns = df_model.select_dtypes(include=['float64', 'int64']).columns.tolist()
    feature_columns = [col for col in feature_columns if col not in ['Life_expectancy', 'Year']]
    
    # Pr√©paration des donn√©es
    X = df_model[feature_columns]
    y = df_model['Life_expectancy']
    
    # Division train/test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Standardisation des features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    
    # Cr√©ation et entra√Ænement du mod√®le pour la s√©lection de features
    sel_model = RandomForestRegressor(n_estimators=100, random_state=42)
    sel_model.fit(X_train_scaled, y_train)
    
    # S√©lection des features les plus importantes
    selector = SelectFromModel(sel_model, prefit=True, max_features=10)  # Limiter √† 10 features
    feature_mask = selector.get_support()
    selected_features = [feature for feature, selected in zip(feature_columns, feature_mask) if selected]
    
    # Cr√©ation et entra√Ænement du mod√®le final avec les features s√©lectionn√©es
    final_model = RandomForestRegressor(n_estimators=100, random_state=42)
    final_model.fit(X_train[selected_features], y_train)
    
    # Calcul de l'importance des features
    feature_importance = dict(zip(selected_features, final_model.feature_importances_))
    sorted_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)
    
    return final_model, selected_features, scaler, sorted_features

def calculate_trend(data, column):
    """
    Calcule la tendance moyenne annuelle pour une colonne donn√©e
    en se concentrant sur les derni√®res ann√©es pour mieux capturer
    la tendance r√©cente
    """
    if len(data) < 2:
        return 0
    
    # Se concentrer sur les 5 derni√®res ann√©es pour la tendance
    recent_data = data.tail(5)
    if len(recent_data) < 2:
        recent_data = data
    
    yearly_changes = []
    values = recent_data[column].values
    
    for i in range(1, len(values)):
        if values[i-1] != 0:  # √âviter la division par z√©ro
            yearly_change = (values[i] - values[i-1]) / values[i-1]
            yearly_changes.append(yearly_change)
    
    if not yearly_changes:
        return 0
    
    return np.mean(yearly_changes)

def predict_life_expectancy(model, features, scaler, country_data, years_ahead):
    """
    Pr√©dit l'esp√©rance de vie avec une seed fixe pour la reproductibilit√©
    """
    # Fixer la seed pour numpy
    np.random.seed(42)
    
    predictions = []
    current_data = country_data[features].iloc[-1:].copy()
    
    # Obtenir la derni√®re valeur connue
    last_known_value = country_data['Life_expectancy'].iloc[-1]
    
    # Calculer la tendance moyenne annuelle sur les 5 derni√®res ann√©es
    recent_data = country_data.sort_values('Year').tail(5)
    yearly_changes = recent_data['Life_expectancy'].diff().dropna()
    avg_yearly_increase = yearly_changes.mean()
    
    # G√©n√©rer les pr√©dictions
    current_value = last_known_value
    
    for year in range(years_ahead):
        # Ajouter une petite variabilit√© √† la tendance
        variation = np.random.normal(0, abs(avg_yearly_increase) * 0.1)  # 10% de variabilit√©
        increase = avg_yearly_increase + variation
        
        # R√©duire progressivement l'augmentation √† mesure qu'on approche du maximum
        max_life_expectancy = 95  # Valeur maximum r√©aliste
        progress_to_max = (current_value / max_life_expectancy)
        reduction_factor = max(0, 1 - progress_to_max**2)
        increase = increase * reduction_factor
        
        # Calculer la nouvelle valeur
        new_value = current_value + increase
        
        # S'assurer que la valeur reste dans des limites raisonnables
        new_value = min(max(new_value, current_value), max_life_expectancy)
        
        predictions.append(new_value)
        current_value = new_value
    
    # R√©initialiser la seed pour ne pas affecter d'autres parties du code
    np.random.seed(None)
    
    return predictions

# Ajouter ce style CSS global apr√®s le chargement des donn√©es
st.markdown("""
    <style>
    .gradient-text {
        background: linear-gradient(45deg, #1e88e5, #00acc1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 3em;
        font-weight: bold;
        text-align: center;
        margin-bottom: 1em;
        animation: gradient 3s ease infinite;
    }
    
    @keyframes gradient {
        0% {background-position: 0% 50%;}
        50% {background-position: 100% 50%;}
        100% {background-position: 0% 50%;}
    }
    </style>
""", unsafe_allow_html=True)

def get_variable_groups():
    """
    Retourne un dictionnaire des variables group√©es par cat√©gorie avec les noms corrects du dataset.
    """
    return {
        "Sant√© g√©n√©rale": {
            "variables": ['Life_expectancy', 'Adult_mortality', 'BMI', 'Infant_deaths', 'Under_five_deaths'],
            "description": "Indicateurs g√©n√©raux de sant√© (Repr√©sente les d√©c√®s pour 1000 habitants)",
            "max_scale": 100
        },
        "Maladies et vaccinations (%)": {
            "variables": ['Hepatitis_B', 'Polio', 'Diphtheria', 'Measles'],
            "description": "Taux de vaccination et pr√©valence des maladies",
            "max_scale": 100
        },
        "Facteurs de risque": {
            "variables": ['Thinness_ten_nineteen_years', 'Thinness_five_nine_years'],
            "description": "Facteurs de risque pour la sant√© : Pr√©valence de la maigreur chez les enfants",
            "max_scale": 100
        },
        "Indicateurs de d√©veloppement": {
            "variables": ['Schooling'],
            "description": "Temps moyen pass√© √† l'√©cole",
            "max_scale": 100
        },
        "Indicateurs √©conomiques": {
            "variables": ['GDP_per_capita'],
            "description": "Produit int√©rieur brut par habitant",
            "format": "currency"
        },
        "Donn√©es d√©mographiques": {
            "variables": ['Population_mln'],
            "description": "Statistiques de population",
            "format": "large_number"
        },
        "Autres": {
            "variables": ["Incidents_HIV", "Alcohol_consumption"],
            "description": "Statistiques autres : Incidents de VIH pour 1000 habitants et consommation d'alcool en litre",
            "max_scale": 50
        }
    }

def create_comparison_chart(df_filtered, pays1, pays2, groupe, variables):
    """
    Cr√©e un graphique de comparaison pour un groupe de variables sp√©cifique.
    """
    data_pays1 = df_filtered[df_filtered['Country'] == pays1].iloc[0]  # Notez le changement ici pour Country_Name
    data_pays2 = df_filtered[df_filtered['Country'] == pays2].iloc[0]  # Notez le changement ici pour Country_Name
    
    # Cr√©er un DataFrame pour la comparaison
    comparison_data = pd.DataFrame({
        'Variable': variables,
        pays1: [data_pays1[col] for col in variables],
        pays2: [data_pays2[col] for col in variables]
    })
    
    # Cr√©er le graphique
    fig = px.bar(
        comparison_data,
        x='Variable',
        y=[pays1, pays2],
        barmode='group',
        title=f"{groupe}",
        color_discrete_sequence=['#1f77b4', '#ff7f0e']
    )
    
    # Personnaliser le graphique
    fig.update_layout(
        xaxis_tickangle=-45,
        height=400,
        template="plotly_white",
        showlegend=True,
        legend_title="Pays"
    )
    
    return fig

def format_value(value, format_type=None):
    """
    Formate les valeurs selon leur type.
    """
    if pd.isna(value):
        return "N/A"
    
    if format_type == "currency":
        return f"${value:,.2f}"
    elif format_type == "large_number":
        return f"{value:,.0f}"
    else:
        return f"{value:.2f}"

# Cr√©ation du menu lat√©ral avec ic√¥nes
with st.sidebar:
    # Ajout du titre avant le menu
    st.markdown("""
        <style>
        .sidebar-title {
            background: linear-gradient(45deg, #1e88e5, #00acc1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2em;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1em;
            animation: gradient 3s ease infinite;
        }
        </style>
        
        <div class="sidebar-title">
            Life Expectancy Dashboard
        </div>
    """, unsafe_allow_html=True)
    st.markdown("<hr>", unsafe_allow_html=True)  # Ligne de s√©paration
    selected = option_menu(
        menu_title="Menu",
        options=["Accueil","Comparaison de pays","√âvolution dans le temps", "Pr√©dictions", "Analyses","Carte","√Ä propos"],
        icons=["house","bar-chart", "bar-chart","graph-up", "info-circle","map"],
        menu_icon="",
        default_index=0,
    )
    # Ajout d'une ligne de s√©paration
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Logo et sous-titre sous le menu
    st.markdown(
        f"""
        <div style='text-align: center;'>
            <img src='data:image/jpeg;base64,{base64.b64encode(open("Logo-ISUP.png", "rb").read()).decode()}' style='width: 150px;'>
        </div>
        """, 
        unsafe_allow_html=True
    )
    st.markdown("<p style='text-align: center; font-size: 1em;'>Projet Data Visualisation<br>ISUP 2024</p>", unsafe_allow_html=True)

if selected == "Comparaison de pays":
    st.markdown('<div class="gradient-text">Comparaison de pays</div>', unsafe_allow_html=True)
    
    # Cr√©ation des filtres
    col1, col2, col3 = st.columns(3)
    
    with col1:
        pays1 = st.selectbox(
            "S√©lectionner le premier pays",
            options=sorted(df['Country'].unique().tolist()),
            index=list(sorted(df['Country'].unique())).index('France') if 'France' in df['Country'].unique() else 0
        )
    
    with col2:
        default_index = list(sorted(df['Country'].unique())).index('United States') if 'United States' in df['Country'].unique() else 0
        pays2 = st.selectbox(
            "S√©lectionner le deuxi√®me pays",
            options=sorted(df['Country'].unique().tolist()),
            index=default_index
        )
    
    with col3:
        annee = st.selectbox(
            "S√©lectionner l'ann√©e",
            options=sorted(df['Year'].unique().tolist()),
            index=len(df['Year'].unique()) - 1
        )

    if pays1 and pays2 and annee:
        # Filtrer les donn√©es pour l'ann√©e s√©lectionn√©e
        df_filtered = df[df['Year'] == annee]
        
        # Obtenir les groupes de variables
        variable_groups = get_variable_groups()
        
        # Cr√©er un onglet pour chaque groupe de variables
        tabs = st.tabs(list(variable_groups.keys()))
        
        for tab, (groupe, group_info) in zip(tabs, variable_groups.items()):
            with tab:
                # Afficher la description du groupe
                st.markdown(f"*{group_info['description']}*")
                
                # Cr√©er et afficher le graphique pour ce groupe
                fig = create_comparison_chart(
                    df_filtered, 
                    pays1, 
                    pays2, 
                    groupe, 
                    group_info['variables']
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Afficher le tableau d√©taill√©
                with st.expander("Voir les donn√©es d√©taill√©es"):
                    data_pays1 = df_filtered[df_filtered['Country'] == pays1].iloc[0]
                    data_pays2 = df_filtered[df_filtered['Country'] == pays2].iloc[0]
                    
                    # Cr√©er un DataFrame pour l'affichage
                    comparison_df = pd.DataFrame({
                        'Variable': group_info['variables'],
                        pays1: [format_value(data_pays1[var], group_info.get('format')) for var in group_info['variables']],
                        pays2: [format_value(data_pays2[var], group_info.get('format')) for var in group_info['variables']],
                        'Diff√©rence': [
                            format_value(data_pays1[var] - data_pays2[var], group_info.get('format'))
                            for var in group_info['variables']
                        ]
                    })
                    st.dataframe(comparison_df, use_container_width=True)

elif selected == "Carte":
    create_kepler_map()

elif selected == "Pr√©dictions":
    st.markdown('<div class="gradient-text">Pr√©dictions de l\'esp√©rance de vie</div>', unsafe_allow_html=True)
    
    # Pr√©paration du mod√®le
    @st.cache_resource
    def get_prediction_model():
        model, features, scaler, feature_importance = prepare_prediction_model(df)
        return model, features, scaler, feature_importance
    
    try:
        model, selected_features, scaler, feature_importance = get_prediction_model()
        
        # Enlever les styles qui causent la bande bleue
        st.markdown("""
            <style>
            div[data-testid="stVerticalBlock"] > div:first-child {
                box-shadow: none !important;
                border: none !important;
            }
            </style>
        """, unsafe_allow_html=True)
        
        # S√©lection du pays
        selected_country = st.selectbox(
            "S√©lectionner un pays",
            options=sorted(df['Country'].unique().tolist()),
            index=list(sorted(df['Country'].unique())).index('France') if 'France' in df['Country'].unique() else 0
        )
        
        # S√©lection de l'ann√©e cible
        last_year = df['Year'].max()
        target_year = st.number_input(
            "Ann√©e cible pour la pr√©diction",
            min_value=last_year + 1,
            max_value=last_year + 50,
            value=last_year + 10
        )
        
        years_ahead = target_year - last_year
        
        if st.button("Pr√©dire l'esp√©rance de vie", use_container_width=True):
            country_data = df[df['Country'] == selected_country]
            
            if not country_data.empty:
                # Faire la pr√©diction
                predictions = predict_life_expectancy(model, selected_features, scaler, country_data, years_ahead)
                final_prediction = predictions[-1]
                current_life_expectancy = country_data[country_data['Year'] == last_year]['Life_expectancy'].iloc[0]
                
                # Afficher le r√©sultat
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric(
                        f"Esp√©rance de vie actuelle ({last_year})",
                        f"{current_life_expectancy:.1f} ans"
                    )
                
                with col2:
                    st.metric(
                        f"Esp√©rance de vie pr√©dite ({target_year})",
                        f"{final_prediction:.1f} ans",
                        f"{final_prediction - current_life_expectancy:.1f} ans"
                    )
                
                # Graphique
                fig = go.Figure()
                
                # Donn√©es historiques
                historical_data = country_data[['Year', 'Life_expectancy']].sort_values('Year')
                fig.add_trace(go.Scatter(
                    x=[historical_data['Year'].iloc[-1], target_year],
                    y=[current_life_expectancy, final_prediction],
                    mode='lines+markers',
                    name='Projection',
                    line=dict(color='#ff7f0e', dash='dot')
                ))
                
                fig.update_layout(
                    title=f"Projection de l'esp√©rance de vie pour {selected_country}",
                    xaxis_title="Ann√©e",
                    yaxis_title="Esp√©rance de vie (ann√©es)",
                    template="plotly_white",
                    showlegend=False,
                    height=300
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Note explicative
                st.info(
                    "Cette pr√©diction est bas√©e sur les tendances historiques et les caract√©ristiques actuelles du pays. "
                    "De nombreux facteurs externes peuvent influencer l'esp√©rance de vie future."
                )
            
            else:
                st.error("Donn√©es non disponibles pour ce pays.")
                
    except Exception as e:
        st.error(f"Une erreur s'est produite : {str(e)}")

elif selected == "Accueil":
    # Titre principal avec animation CSS
    st.markdown("""
        <style>
        .gradient-text {
            background: linear-gradient(45deg, #1e88e5, #00acc1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 3em;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1em;
            animation: gradient 3s ease infinite;
        }
        
        @keyframes gradient {
            0% {background-position: 0% 50%;}
            50% {background-position: 100% 50%;}
            100% {background-position: 0% 50%;}
        }
        
        .card {
            padding: 1em;
            border-radius: 5px;
            background-color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1em;
        }
        
        .highlight {
            color: #1e88e5;
            font-weight: bold;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        </style>
        
        <div class="gradient-text">
            Analyse Mondiale de l'Esp√©rance de Vie
        </div>
    """, unsafe_allow_html=True)

    # Introduction
    st.markdown("""
        <div class="card">
            Ce dashboard interactif permet d'explorer et d'analyser les facteurs influen√ßant l'esp√©rance de vie √† travers le monde. 
            Les donn√©es proviennent de l'<span class="highlight">Organisation Mondiale de la Sant√© (OMS)</span> et ont √©t√© enrichies 
            avec des informations de la <span class="highlight">Banque Mondiale</span>.
        </div>
    """, unsafe_allow_html=True)

    # Statistiques rapides
    st.subheader("üìä Statistiques Cl√©s")
    col1, col2, col3, col4 = st.columns(4)

    # Calcul des statistiques
    avg_life_expectancy = df['Life_expectancy'].mean()
    max_life_expectancy = df['Life_expectancy'].max()
    min_life_expectancy = df['Life_expectancy'].min()
    num_countries = df['Country'].nunique()

    with col1:
        st.markdown("""
            <div class="stat-card">
                <h3 style="color: #1e88e5;">Esp√©rance de vie moyenne</h3>
                <h2>{:.1f} ans</h2>
            </div>
        """.format(avg_life_expectancy), unsafe_allow_html=True)

    with col2:
        st.markdown("""
            <div class="stat-card">
                <h3 style="color: #1e88e5;">Maximum</h3>
                <h2>{:.1f} ans</h2>
            </div>
        """.format(max_life_expectancy), unsafe_allow_html=True)

    with col3:
        st.markdown("""
            <div class="stat-card">
                <h3 style="color: #1e88e5;">Minimum</h3>
                <h2>{:.1f} ans</h2>
            </div>
        """.format(min_life_expectancy), unsafe_allow_html=True)

    with col4:
        st.markdown("""
            <div class="stat-card">
                <h3 style="color: #1e88e5;">Pays √©tudi√©s</h3>
                <h2>{}</h2>
            </div>
        """.format(num_countries), unsafe_allow_html=True)

    # Section interactive
    st.subheader("üåç Explorer les Donn√©es")
    
    col1, col2 = st.columns(2)
    
    with col1:
        selected_year = st.slider(
            "S√©lectionnez une ann√©e",
            min_value=int(df['Year'].min()),
            max_value=int(df['Year'].max()),
            value=int(df['Year'].max())
        )

    with col2:
        view_type = st.selectbox(
            "Choisissez un type de visualisation",
            ["Esp√©rance de vie moyenne par r√©gion", "Distribution des pays"]
        )

    # Cr√©ation de la visualisation selon le choix
    df_year = df[df['Year'] == selected_year]

    if view_type == "Esp√©rance de vie moyenne par r√©gion":
        fig = px.bar(
            df_year.groupby('Region')['Life_expectancy'].mean().reset_index(),
            x='Region',
            y='Life_expectancy',
            title=f"Esp√©rance de vie moyenne par r√©gion en {selected_year}",
            labels={'Life_expectancy': 'Esp√©rance de vie (ann√©es)', 'Region': 'R√©gion'},
            color_discrete_sequence=['#1e88e5']
        )
    else:
        fig = px.box(
            df_year,
            x='Region',
            y='Life_expectancy',
            title=f"Distribution de l'esp√©rance de vie par r√©gion en {selected_year}",
            labels={'Life_expectancy': 'Esp√©rance de vie (ann√©es)', 'Region': 'R√©gion'}
        )

    fig.update_layout(
        template="plotly_white",
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)

    # Section "En savoir plus"
    st.subheader("üìö En savoir plus")
    with st.expander("√Ä propos des donn√©es"):
        st.markdown("""
            Les donn√©es analys√©es dans ce dashboard proviennent de plusieurs sources fiables :
            
            - **Organisation Mondiale de la Sant√© (OMS)** : Donn√©es sur les vaccinations, l'IMC, le VIH, et les taux de mortalit√©
            - **Banque Mondiale** : Donn√©es sur la population, le PIB et l'esp√©rance de vie
            - **Our World in Data (Universit√© d'Oxford)** : Informations sur la scolarisation
            
            Les donn√©es ont √©t√© nettoy√©es et les valeurs manquantes ont √©t√© trait√©es selon deux approches :
            1. Utilisation de la moyenne des trois ann√©es les plus proches
            2. Utilisation de la moyenne r√©gionale
            
            Pour garantir la qualit√© des analyses, les pays avec trop de donn√©es manquantes ont √©t√© exclus.
        """)

    # Notes de bas de page
    st.markdown("""
        <div style='margin-top: 50px; text-align: center; color: #666;'>
            <p>Projet Data Visualization - ISUP 2024<br>
            Source des donn√©es : OMS, Banque Mondiale, Our World in Data, Kaggle</p>
        </div>
    """, unsafe_allow_html=True)

elif selected == "√âvolution dans le temps":
    st.markdown('<div class="gradient-text">√âvolution dans le temps</div>', unsafe_allow_html=True)
    
    # Ajout du style CSS coh√©rent avec les autres onglets
    st.markdown("""
        <style>
        div[data-testid="stHorizontalBlock"] {
            background-color: #FFFFFF;
            padding: 15px;
            border: 1px solid #8BA6BC;
            border-radius: 5px;
        }
        </style>
    """, unsafe_allow_html=True)
    
    # Cr√©ation des colonnes pour les filtres
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # D√©finition des pays par d√©faut (3 d√©velopp√©s, 3 en d√©veloppement)
        default_countries = ["France", "United States", "Japan", "India", "Brazil", "South Africa"]
        
        # Cr√©ation de la liste des pays avec l'option "All"
        available_countries = ["All"] + sorted(df['Country'].unique().tolist())
        
        # V√©rification que les pays par d√©faut existent dans le dataset
        valid_default_countries = [country for country in default_countries if country in df['Country'].unique()]
        
        selected_countries = st.multiselect(
            "S√©lectionner les pays √† comparer",
            options=available_countries,
            default=valid_default_countries
        )
    
    with col2:
        # S√©lection de la variable √† analyser
        numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
        selected_variable = st.selectbox(
            "S√©lectionner la variable √† analyser",
            options=numeric_columns,
            index=numeric_columns.index('Life_expectancy') if 'Life_expectancy' in numeric_columns else 0
        )
        
    with col3:
        # S√©lection du type de graphique
        chart_type = st.selectbox(
            "S√©lectionner le type de graphique",
            options=["Barres", "Lignes", "Points", "Points + Lignes"],
            index=0  # Par d√©faut sur "Lignes"
        )
    
    # Gestion de la s√©lection "All"
    if "All" in selected_countries:
        selected_countries = df['Country'].unique().tolist()
    elif not selected_countries:  # Si aucun pays n'est s√©lectionn√©
        st.warning("Veuillez s√©lectionner au moins un pays pour afficher le graphique.")
        selected_countries = []
    
    # Filtrer les donn√©es selon les s√©lections
    if selected_countries:
        filtered_df = df[df['Country'].isin(selected_countries)].copy()
        # Trier le DataFrame par ann√©e de mani√®re croissante
        filtered_df = filtered_df.sort_values('Year')
        
        # Utilisation d'une colonne unique pour maintenir la coh√©rence visuelle
        col1, = st.columns(1)
        with col1:
            st.markdown(f'#### Evolution de {selected_variable} par pays', unsafe_allow_html=True)
            
            # Cr√©ation du graphique selon le type s√©lectionn√©
            if chart_type == "Barres":
                fig = px.bar(
                    filtered_df,
                    x="Country",
                    y=selected_variable,
                    color="Country",
                    animation_frame="Year",
                    animation_group="Country",
                    range_y=[filtered_df[selected_variable].min() * 0.95, filtered_df[selected_variable].max() * 1.05]
                )
            
            elif chart_type == "Lignes":
                animation_speed = st.slider("Vitesse d'animation (ms)", 100, 1000, 300, step=100)
                # Cr√©er une trace pour chaque pays
                fig = px.line(
                    filtered_df,
                    x="Year",
                    y=selected_variable,
                    color="Country",
                    line_shape="linear",
                    markers=False,
                    range_x=[filtered_df['Year'].min(), filtered_df['Year'].max()],
                    range_y=[filtered_df[selected_variable].min() * 0.95,
                            filtered_df[selected_variable].max() * 1.05]
                )
                
                # Ajouter l'animation en modifiant les traces
                for trace in fig.data:
                    trace.update(
                        mode='lines',  # S'assurer que nous sommes en mode 'lines'
                        x=[],  # Commencer avec des listes vides
                        y=[]
                    )
                
                # Cr√©er les frames d'animation
                frames = []
                years = sorted(filtered_df['Year'].unique())
                for year in years:
                    frame_data = []
                    for country in filtered_df['Country'].unique():
                        country_data = filtered_df[
                            (filtered_df['Country'] == country) & 
                            (filtered_df['Year'] <= year)
                        ]
                        frame_data.append(
                            go.Scatter(
                                x=country_data['Year'],
                                y=country_data[selected_variable],
                                mode='lines',
                                name=country
                            )
                        )
                    frames.append(go.Frame(data=frame_data, name=str(year)))
                
                fig.frames = frames
                
                # Configurer l'animation
                fig.update_layout(
                    updatemenus=[{
                        'type': 'buttons',
                        'showactive': False,
                        'buttons': [{
                            'label': 'Play',
                            'method': 'animate',
                            'args': [None, {
                                'frame': {'duration': animation_speed, 'redraw': True},
                                'fromcurrent': True,
                                'transition': {'duration': animation_speed//2}
                            }]
                        }]
                    }],
                    # Ajouter un slider pour naviguer dans les ann√©es
                    sliders=[{
                        'currentvalue': {'prefix': 'Year: '},
                        'steps': [{'args': [[str(year)]], 'label': str(year), 'method': 'animate'} 
                                for year in years]
                    }]
                )

            elif chart_type == "Points":
                fig = px.scatter(
                    filtered_df,
                    x="Year",
                    y=selected_variable,
                    color="Country",
                    size_max=10
                )
            else:  # "Points + Lignes"
                fig = px.line(
                    filtered_df,
                    x="Year",
                    y=selected_variable,
                    color="Country",
                    line_shape="linear",
                    markers=True
                )
            
            # Personnalisation du graphique
            fig.update_layout(
                xaxis_title="Ann√©e" if chart_type != "Barres" else "Pays",
                yaxis_title=selected_variable,
                showlegend=True,
                template="plotly_white"
            )
            
            # Personnalisation de l'animation seulement pour le graphique en barres
            if chart_type == "Barres":
                fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1000
                fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500
            
            # Afficher le graphique
            st.plotly_chart(fig, use_container_width=True)
        
        # Ajouter un tableau de donn√©es sous le graphique avec les ann√©es dans l'ordre croissant
        with st.expander("Voir les donn√©es"):
            pivot_table = filtered_df.pivot_table(
                index='Year',
                columns='Country',
                values=selected_variable
            ).round(2)
            # Trier l'index (ann√©es) dans l'ordre croissant
            pivot_table = pivot_table.sort_index()
            st.dataframe(pivot_table)

elif selected == "Analyses":
    st.markdown('<div class="gradient-text">Analyses descriptives</div>', unsafe_allow_html=True)
    
    # Sous-onglets pour diff√©rentes analyses
    #analyse_tab = st.radio(
    #    "Choisir une analyse",
    #    ["Histogramme", "Boite √† moustaches", "Corr√©lations"],
    #    horizontal=True
    #)
    
    analyse_tab = st.tabs(["Histogramme", "Boite √† moustaches", "Corr√©lations"])

    with analyse_tab[0]:
        st.subheader("Histogramme")
    
        # Ajout d'options de personnalisation
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # S√©lection de la variable √† analyser
            numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
            selected_var = st.selectbox(
                "S√©lectionner la variable √† analyser",
                options=numeric_columns,
                index=numeric_columns.index('Life_expectancy') if 'Life_expectancy' in numeric_columns else 0
            )
        
        with col2:
            nb_bins = st.slider("Nombre de bins", 10, 100, 30)
        
        with col3:
            color = st.color_picker("Couleur", "#1E88E5")

        # Style CSS
        st.markdown("""
            <style>
            div[data-testid="stHorizontalBlock"] {
                background-color: #FFFFFF;
                padding: 15px;
                border: 1px solid #8BA6BC;
                border-radius: 5px;
            }
            </style>
        """, unsafe_allow_html=True)

        # Graphique dans une colonne
        col1, = st.columns(1)
        with col1:
            st.markdown(f'#### Distribution de {selected_var}', unsafe_allow_html=True)
            fig = px.histogram(
                df,
                x=selected_var,
                template='plotly_dark',
                nbins=nb_bins,
                color_discrete_sequence=[color]
            )
            st.plotly_chart(fig, use_container_width=True)
        
    with analyse_tab[1]:
        st.subheader("Bo√Æte √† moustaches")
        st.markdown("""
            <style>
            div[data-testid="stHorizontalBlock"] {
                background-color: #FFFFFF;
                padding: 15px;
                border: 1px solid #8BA6BC;
                border-radius: 5px;
            }
            </style>
        """, unsafe_allow_html=True)
        
        # Ajout des filtres
        col1, col2 = st.columns(2)
        
        with col1:
            grouping_var = st.selectbox(
                "Grouper par",
                options=["Status", "Region", "Status et Region"],
                index=0
            )
            
        with col2:
            # S√©lection de la variable √† analyser
            numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
            selected_var_box = st.selectbox(
                "Variable √† analyser",
                options=numeric_columns,
                index=numeric_columns.index('Life_expectancy') if 'Life_expectancy' in numeric_columns else 0,
                key='boxplot_var'  # Cl√© unique pour √©viter le conflit avec le selectbox pr√©c√©dent
            )
        
        col1, = st.columns(1)
        with col1:
            if grouping_var == "Status et Region":
                fig = px.violin(
                    df,
                    x='Region',
                    y=selected_var_box,
                    color='Status',
                    template='plotly_dark',
                    box=True,
                )
            else:
                fig = px.violin(
                    df,
                    x=grouping_var,
                    y=selected_var_box,
                    color=grouping_var,
                    template='plotly_dark',
                    box=True,
                )
            st.plotly_chart(fig, use_container_width=True)
    
    with analyse_tab[2]: #elif analyse_tab == "Corr√©lations":
        st.subheader("Matrice de corr√©lation")
        st.markdown("""
            <style>
            div[data-testid="stHorizontalBlock"] {
                background-color: #FFFFFF;
                padding: 15px;
                border: 1px solid #8BA6BC;
                border-radius: 5px;
            }
            </style>
        """, unsafe_allow_html=True)
        # Options de personnalisation
        col1, col2 = st.columns(2)
        with col1:
            color_scale = st.selectbox(
                "Palette de couleurs",
                ["Greens", "Viridis", "RdBu", "Reds", "Blues"],
                index=4
            )
        with col2:
            decimal_places = st.slider(
                "Nombre de d√©cimales",
                0, 4, 2
            )
        
        # Liste des variables
        numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
        columns_list = ["All"] + sorted(numeric_columns)
        
        selected_vars = st.multiselect(
            "S√©lectionner les variables pour la matrice de corr√©lation",
            options=columns_list
        )
        
        if selected_vars:
            if "All" in selected_vars:
                correlation_matrix = df[numeric_columns].corr()
            else:
                correlation_matrix = df[selected_vars].corr()
            
            col1, = st.columns(1)  # Utilisez une seule colonne pour la largeur totale
            with col1:    
                fig = px.imshow(
                    correlation_matrix,
                    color_continuous_scale=color_scale,
                    aspect='auto'
                )
                fig.update_traces(
                    text=correlation_matrix.round(decimal_places), 
                    texttemplate='%{text}'
                )
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Veuillez s√©lectionner au moins une variable pour afficher la matrice de corr√©lation")

elif selected == "√Ä propos":
    st.markdown('<div class="gradient-text">√Ä propos</div>', unsafe_allow_html=True)
    
    # Cr√©ation des sous-onglets
    about_tab = st.tabs(["Source des donn√©es", "Pr√©sentation", "Visualisation"])
    
    # Premier onglet : Lien vers la source des donn√©es
    with about_tab[0]:
        st.header("Source des donn√©es")
        st.markdown("""
        <div style="text-align: center; padding: 20px;">
            <a href="https://www.kaggle.com/datasets/kumarajarshi/life-expectancy-who" target="_blank" 
               style="background-color: #FF4B4B; 
                      color: white; 
                      padding: 10px 20px; 
                      border-radius: 5px; 
                      text-decoration: none; 
                      font-weight: bold;">
                Acc√©der aux donn√©es originales
            </a>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        Ces donn√©es proviennent du site Kaggle o√π elles sont mises √† disposition. Pour aux donn√©es, cliquez sur le bouton ci-dessus.

        Le jeu de donn√©es contenait des donn√©es inexactes et beaucoup de valeurs manquantes.
        Le jeu de donn√©es est maintenant compl√®tement mis √† jour.
        Les donn√©es concernant la Population, le PIB et l'Esp√©rance de vie ont 
        √©t√© mises √† jour selon les donn√©es de la Banque Mondiale. Les informations sur 
        les vaccinations contre la Rougeole, l'H√©patite B, la Polio et la Dipht√©rie, la consommation d'alcool, 
        l'IMC, les cas de VIH, les taux de mortalit√© et la maigreur ont √©t√© collect√©es √† partir des jeux de 
        donn√©es publics de l'Organisation Mondiale de la Sant√©. Les informations sur la Scolarisation ont √©t√© collect√©es 
        aupr√®s de "Our World in Data", un projet de l'Universit√© d'Oxford.

        Le jeu de donn√©es pr√©sentait quelques valeurs manquantes. Plusieurs **strat√©gies de remplissage des donn√©es 
        manquantes** ont √©t√© appliqu√©es :
        1. Remplissage avec la **moyenne des trois ann√©es les plus proches**. 
        Si un pays avait une valeur manquante pour une ann√©e donn√©e, la donn√©e a √©t√© compl√©t√©e avec la moyenne des 
        trois ann√©es les plus proches.
        2. Remplissage avec la **moyenne de la R√©gion**. Si un pays avait des valeurs manquantes pour toutes 
        les ann√©es, les donn√©es ont √©t√© compl√©t√©es avec la moyenne de la R√©gion (par exemple Asie, Afrique, 
        Union Europ√©enne, etc.)

        Les donn√©es sont ajust√©es et les valeurs manquantes sont compl√©t√©es. Les pays qui avaient plus de 4 c
        olonnes de donn√©es manquantes ont √©t√© retir√©s de la base de donn√©es. Par exemple le Soudan, l
        e Soudan du Sud et la Cor√©e du Nord.

        La base de donn√©es poss√®de une variable qui classe les pays en deux groupes : pays **D√©velopp√©s vs En d√©veloppement**. 
        Selon l'Organisation Mondiale du Commerce, chaque pays se d√©finit lui-m√™me comme "D√©velopp√©" ou "En d√©veloppement". 
        Par cons√©quent, il est difficile de cat√©goriser les pays. L'ONU dispose d'une liste datant de 2014 qui, √† des fins 
        d'analyse, classe les pays comme √©conomies d√©velopp√©es, en transition et en d√©veloppement. Les pays ayant des 
        √©conomies en transition pr√©sentent des caract√©ristiques similaires aux pays cat√©goris√©s comme d√©velopp√©s ou en 
        d√©veloppement. Les pays ont √©t√© regroup√©s selon leur Revenu National Brut par habitant. En cons√©quence, les nations 
        ont √©t√© divis√©es en quatre groupes de revenus : revenu √©lev√©, revenu interm√©diaire sup√©rieur, revenu interm√©diaire 
        inf√©rieur et faible revenu. Les niveaux de Revenu Int√©rieur Brut sont fix√©s par la Banque Mondiale pour assurer la comparabilit√©.
                """)
    
    # Deuxi√®me onglet : Pr√©sentation des donn√©es
    with about_tab[1]:
        st.header("Pr√©sentation des donn√©es")
        st.write("""
        ### Context
        
        Bien que de nombreuses √©tudes aient √©t√© men√©es par le pass√© sur les facteurs influen√ßant l'esp√©rance de vie, 
        en tenant compte des variables d√©mographiques, de la composition des revenus et des taux de mortalit√©, il a √©t√© constat√© que 
        l'effet de la vaccination et de l'indice de d√©veloppement humain n'avait pas √©t√© pris en compte auparavant. De plus, certaines 
        recherches ant√©rieures ont √©t√© r√©alis√©es en utilisant une r√©gression lin√©aire multiple bas√©e sur des donn√©es d'une seule ann√©e 
        pour tous les pays. Par cons√©quent, cela motive la r√©solution de ces deux facteurs mentionn√©s pr√©c√©demment en formulant un mod√®le de 
        r√©gression bas√© sur un mod√®le √† effets mixtes et une r√©gression lin√©aire multiple, tout en consid√©rant les donn√©es sur une p√©riode 
        allant de 2000 √† 2015 pour tous les pays. Des vaccinations importantes comme l'h√©patite B, la polio et la dipht√©rie seront √©galement 
        prises en compte. En r√©sum√©, cette √©tude se concentrera sur les facteurs de vaccination, les facteurs de mortalit√©, les facteurs √©conomiques, 
        les facteurs sociaux et d'autres facteurs li√©s √† la sant√©. √âtant donn√© que les observations de cet ensemble de donn√©es sont bas√©es sur 
        diff√©rents pays, il sera plus facile pour un pays de d√©terminer le facteur pr√©dictif qui contribue √† une valeur plus faible de l'esp√©rance 
        de vie. Cela aidera √† sugg√©rer √† un pays quels domaines devraient √™tre privil√©gi√©s afin d'am√©liorer efficacement l'esp√©rance de vie de sa population.
        
        ### Contenu
        Le projet repose sur l'exactitude des donn√©es. Le r√©f√©rentiel de donn√©es de l'Observatoire mondial de la sant√© (GHO) sous l'Organisation 
        mondiale de la sant√© (OMS) suit l'√©tat de sant√© ainsi que de nombreux autres facteurs connexes pour tous les pays. Les ensembles de donn√©es 
        sont mis √† la disposition du public √† des fins d'analyse des donn√©es de sant√©. L'ensemble de donn√©es relatives √† l'esp√©rance de vie et aux 
        facteurs de sant√© pour 193 pays a √©t√© collect√© sur le m√™me site web du r√©f√©rentiel de donn√©es de l'OMS, et les donn√©es √©conomiques correspondantes 
        ont √©t√© collect√©es sur le site web des Nations Unies. Parmi toutes les cat√©gories de facteurs li√©s √† la sant√©, seuls les facteurs critiques 
        les plus repr√©sentatifs ont √©t√© choisis. Il a √©t√© observ√© qu'au cours des 15 derni√®res ann√©es, il y a eu un d√©veloppement consid√©rable dans 
        le secteur de la sant√©, entra√Ænant une am√©lioration des taux de mortalit√© humaine, particuli√®rement dans les pays en d√©veloppement, par rapport 
        aux 30 ann√©es pr√©c√©dentes. Par cons√©quent, dans ce projet, nous avons consid√©r√© les donn√©es de 2000 √† 2015 pour 193 pays pour une analyse plus 
        approfondie. Les fichiers de donn√©es individuels ont √©t√© fusionn√©s en un seul ensemble de donn√©es. Une inspection visuelle initiale des donn√©es 
        a r√©v√©l√© quelques valeurs manquantes. Comme les ensembles de donn√©es provenaient de l'OMS, nous n'avons trouv√© aucune erreur √©vidente. Les donn√©es 
        manquantes ont √©t√© trait√©es dans le logiciel R en utilisant la commande Missmap. Le r√©sultat a indiqu√© que la plupart des donn√©es manquantes 
        concernaient la population, l'h√©patite B et le PIB. Les donn√©es manquantes provenaient de pays moins connus comme le Vanuatu, les Tonga, le Togo, 
        le Cap-Vert, etc. Il √©tait difficile de trouver toutes les donn√©es pour ces pays et il a donc √©t√© d√©cid√© d'exclure ces pays de 
        l'ensemble de donn√©es du mod√®le final. Le fichier fusionn√© final (ensemble de donn√©es final) comprend 22 colonnes et 2938 lignes, 
        ce qui repr√©sente 20 variables pr√©dictives. Toutes les variables pr√©dictives ont ensuite √©t√© divis√©es en plusieurs grandes cat√©gories : 
        facteurs li√©s √† la vaccination, facteurs de mortalit√©, facteurs √©conomiques et facteurs sociaux.
        
        ### Objectifs
        L'ensemble de donn√©es vise √† r√©pondre aux questions cl√©s suivantes :

        1. Les diff√©rents facteurs pr√©dictifs qui ont √©t√© choisis initialement affectent-ils r√©ellement 
        l'esp√©rance de vie ? Quelles sont les variables pr√©dictives qui affectent r√©ellement l'esp√©rance de vie ?
        2. Un pays ayant une valeur d'esp√©rance de vie plus faible (<65 ans) devrait-il augmenter ses d√©penses de sant√© afin d'am√©liorer 
        sa dur√©e de vie moyenne ?
        3. Comment les taux de mortalit√© infantile et adulte affectent-ils l'esp√©rance de vie ?
        4. L'esp√©rance de vie a-t-elle une corr√©lation positive ou n√©gative avec les habitudes alimentaires, le mode de vie, l'exercice physique, le tabagisme, la consommation d'alcool, etc. ?
        5. Quel est l'impact de la scolarisation sur la dur√©e de vie des √™tres humains ?
        6. L'esp√©rance de vie a-t-elle une relation positive ou n√©gative avec la consommation d'alcool ?
        7. Les pays dens√©ment peupl√©s ont-ils tendance √† avoir une esp√©rance de vie plus faible ?
        8. Quel est l'impact de la couverture vaccinale sur l'esp√©rance de vie ?
        """)
        
    # Troisi√®me onglet : Visualisation des donn√©es
    with about_tab[2]:
        st.header("Visualisation des donn√©es")
        
        # Cr√©ation d'un s√©lecteur pour choisir le type de visualisation
        viz_type = st.selectbox(
            "Choisir le type de visualisation",
            ["Table compl√®te", "Statistiques descriptives"]
        )
        
        if viz_type == "Table compl√®te":
            st.dataframe(df)
            
        elif viz_type == "Statistiques descriptives":
            st.write("Statistiques descriptives des donn√©es num√©riques")
            st.dataframe(df.describe())